name: CI
env:
  DEBUG: napi:*
  APP_NAME: rollup
  MACOSX_DEPLOYMENT_TARGET: '10.13'

on:
  workflow_dispatch:
  push:
    branches:
      - master
    tags:
      - 'v*.*.**'
  pull_request:
    types:
      - synchronize
      - opened
      - reopened
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  lint:
    name: Lint and Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout Commit
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 24.6.0
      - name: Install and Cache Node Dependencies
        uses: ./.github/actions/install-and-cache-node-deps
      - name: Lint
        run: npm run ci:lint
      - name: Vulnerabilities
        run: npm audit
      - name: Optional Dependencies
        run: npm run test:package
      - name: CLI Docs
        run: npm run test:options
      - name: Generated Code
        run: |
          npm run build:ast-converters
          # git diff HEAD --exit-code --ignore-space-at-eol

  build:
    defaults:
      run:
        shell: bash 
        # shell: msys2 {0}
    strategy:
      fail-fast: false
      matrix:
        settings:
          # WASM
          - host: ubuntu-latest
            target: wasm32-unknown-unknown
            name: wasm
            is-wasm-build: true
            build: npm run build:wasm
            path: |
              wasm/
              .empty
          - host: ubuntu-latest
            target: wasm32-unknown-unknown
            name: wasm-node
            is-wasm-build: true
            build: npm run build:wasm:node
            path: |
              wasm-node/
              .empty

          # Windows
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            env:
              RUSTFLAGS: -Ctarget-feature=+crt-static
          - host: windows-latest  
            target: x86_64-pc-windows-gnu
            msystem: ucrt64
            toolchain: ucrt-x86_64
            shell: msys2 {0}
            setup: |
              rustup default
              rustup set default-host x86_64-pc-windows-gnu
              rustup default nightly
              rustup install nightly-x86_64-pc-windows-gnu
              rustup install nightly-2025-07-25
              rustup default nightly-x86_64-pc-windows-gnu
              rustup override set nightly-2025-07-25
              rustup show
            build: >-
              set -e &&
              which rustup &&
              rustup target add x86_64-pc-windows-gnu &&
              rustup component add rust-src --toolchain nightly-2025-07-25-x86_64-pc-windows-gnu &&
              npm run build:napi -- --release --target x86_64-pc-windows-gnu
            env:
              MINGW_ARCH: ucrt64
    name: Build ${{ matrix.settings.name || matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    timeout-minutes: 30
    steps:
      - name: Checkout Commit
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: replace organization name
        uses: ./.github/actions/replace-org-name
        with:
          shell: bash
      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        if: ${{ matrix.settings.target != 'x86_64-pc-windows-gnu' }}
        # if: ${{ !matrix.settings.docker }}
        with:
          node-version: 24.6.0
      - uses: msys2/setup-msys2@v2
        if: ${{ matrix.settings.target == 'x86_64-pc-windows-gnu' }}
        with:
          msystem: ${{ matrix.settings.msystem }}
          install: mingw-w64-${{ matrix.settings.toolchain }}-toolchain base-devel binutils git
          pacboy: >-
            aria2:p
            ca-certificates
            rustup:p
            nodejs:p
            rust-wasm:p
            rust-src:p
          update: true
          path-type: inherit
          #location: C:\
          release: false
      - name: Install Toolchain
        uses: dtolnay/rust-toolchain@stable
        # if: ${{ matrix.settings.target != 'x86_64-pc-windows-gnu' }}
        with:
          # toolchain: stable
          targets: ${{ matrix.settings.target }}
          toolchain: nightly-2025-07-25
          components: rust-src
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        # shell: bash
      - name: Setup OpenHarmony SDK
        if: ${{ contains(matrix.settings.target, 'ohos') }}
        uses: openharmony-rs/setup-ohos-sdk@52d50de65363f895558a43de0dceb1f8e3679b1c # v0.2.3
      - name: remove nodejs from msvc
        if: ${{ matrix.settings.target == 'x86_64-pc-windows-gnu' }}
        shell: msys2 {0}
        run: |
          echo $(which node)
          # rm -rf $(which node)
          # rm -rf $(which npm)
          which node
          which npm
        env: ${{ matrix.settings.env || fromJSON('{}') }}
      - name: Restore Cargo cache
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            rust/target/
          key: ${{ matrix.settings.name || matrix.settings.target }}-cargo-${{ matrix.settings.host }}-${{ hashFiles('rust/Cargo.lock') }}
          restore-keys: ${{ matrix.settings.name || matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - name: Install and Cache Node Dependencies
        uses: ./.github/actions/install-and-cache-node-deps
      - name: Build (Matrix override)
        if: ${{ !matrix.settings.docker && matrix.settings.build }}
        # env: ${{ matrix.settings.env || fromJSON('{}') }}
        uses: ./.github/actions/custom-build
        with:
          build: ${{ matrix.settings.build }}
          shell: ${{ matrix.settings.shell || 'bash' }}
      - name: Build (Classic)
        env: ${{ matrix.settings.env || fromJSON('{}') }}
        run: npm run build:napi -- --release --target ${{ matrix.settings.target }} ${{ matrix.settings.cross == 'zig' && '-x' || matrix.settings.cross == 'napi' && '--use-napi-cross' || matrix.settings.cross == 'cross' && '--use-cross' || '' }}
        if: ${{ !matrix.settings.docker && !matrix.settings.build }}
        shell: bash
      - name: Save Cargo cache
        if: github.ref == 'refs/heads/master'
        uses: actions/cache/save@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            rust/target/
          key: ${{ matrix.settings.name || matrix.settings.target }}-cargo-${{ matrix.settings.host }}-${{ hashFiles('rust/Cargo.lock') }}
      - name: Upload wasm artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: bindings-${{ matrix.settings.name }}
          path: ${{ matrix.settings.path }}
          if-no-files-found: error
        if: ${{ matrix.settings.is-wasm-build }}
      - name: Upload napi artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
        if: ${{ !matrix.settings.is-wasm-build }}

  # smoke test for some architectures that do not receive the full test suite
  test:
    name: Test${{ matrix.additionalName || '' }} Node ${{ matrix.node }} (${{ matrix.settings.target }})
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            target: x86_64-pc-windows-gnu
        node:
          - '18.20.0'
          - 24
    runs-on: ${{ matrix.settings.host }}
    timeout-minutes: 15
    steps:
      - name: Checkout Commit
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Setup Node
        if: ${{ matrix.settings.target != 'x86_64-pc-windows-gnu' }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
      - name: Install and Cache Node Dependencies
        uses: ./.github/actions/install-and-cache-node-deps
      - name: Download napi artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .
      - name: Download wasm artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: bindings-wasm
      - name: Build and test Rollup
        run: npm run ${{ matrix.command || 'ci:test:only' }}
        env:
          CI: true

  publish:
    permissions:
      pull-requests: write # for writing comments
      issues: write # for writing comments
      contents: write # for creating a release
    name: Publish
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs:
      - lint
      - test
    # This needs to be adapted for Rollup 5
    if: startsWith(github.ref_name, 'v4')
    steps:
      - name: Checkout Commit
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          # Necessary to find the commits included in the release
          fetch-depth: 0
      - name: replace organization name
        uses: ./.github/actions/replace-org-name
        with:
          shell: bash
      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
      - name: Install and Cache Node Dependencies
        uses: ./.github/actions/install-and-cache-node-deps
      - name: Download all artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          path: artifacts
      - name: Copy wasm files
        run: cp -R artifacts/bindings-wasm/wasm .
      - name: Build JavaScript
        run: npm run build:cjs && cp artifacts/*/*.node dist/ && npm run build:bootstrap
      - name: Move artifacts
        run: |
          ls artifacts/
          sed -i 's/\(const { targets, binaryName, packageName } = await readNapiConfig(packageJsonPath);\)/\1\ndebug$8.info(`${colors.yellowBright(JSON.stringify(targets))} \\n binaryName: ${binaryName}\\n platform: ${packageName}`);/' node_modules/@napi-rs/cli/dist/cli.js
          sed -i 's/\(const dir = distDirs.find.*$\)/\1\ndebug$8.info(`${platformArchABI} --- ${JSON.stringify(distDirs)}`)\n/' node_modules/@napi-rs/cli/dist/cli.js
          npm run ci:artifacts
      - name: Publish
        run: |
          if git --no-pager log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "Publishing regular release"
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git --no-pager log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+$";
          then
            echo "Publishing beta release"
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag beta --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          ROLLUP_RELEASE: 'releasing'
